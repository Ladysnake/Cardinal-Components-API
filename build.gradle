import net.fabricmc.loom.task.RemapJarTask

import java.nio.charset.StandardCharsets
import java.time.Year

plugins {
    id "fabric-loom" version "0.4.24" apply false
    id "net.minecrell.licenser" version "0.2.1"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "maven-publish"
    id "java-library"
}

group = "io.github.onyxstudios"
archivesBaseName = "Cardinal-Components-API"

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'net.minecrell.licenser'
    apply plugin: 'com.matthewprenger.cursegradle'
    apply plugin: 'maven-publish'
    apply plugin: 'java-library'

    archivesBaseName = project.name
    group = "${rootProject.group}.${rootProject.archivesBaseName}"

    apply from: "https://raw.githubusercontent.com/OnyxStudios/Gradle-Scripts/master/scripts/fabric/basic_project.gradle"
}

allprojects {
    apply plugin: "fabric-loom"
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
    version = System.getenv("TRAVIS_TAG") ?: rootProject.mod_version

    repositories {
        maven {
            name = "FabricMC"
            url = "https://maven.fabricmc.net"
        }
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings "net.fabricmc:yarn:${rootProject.minecraft_version}+build.${rootProject.yarn_mappings}:v2"
        modApi "net.fabricmc:fabric-loader:${rootProject.loader_version}"
        modApi fabricApi.module("fabric-api-base", rootProject.fabric_api_version)
        modImplementation fabricApi.module("fabric-networking-v0", rootProject.fabric_api_version)
        testImplementation "org.junit.jupiter:junit-jupiter-api:5.5.0-M1"
        testImplementation "org.junit.jupiter:junit-jupiter-params:5.5.0-M1"
        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
        api "org.jetbrains:annotations:19.0.0"
    }

    processResources {
        // this will ensure that this task is redone when there"s a change
        inputs.property "version", project.version

        // replace stuff in fabric.mod.json, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include "fabric.mod.json"

            // add mod metadata
            expand "version": project.version
        }

        // copy everything else, that"s not the fabric.mod.json
        from(sourceSets.main.resources.srcDirs) {
            exclude "fabric.mod.json"
        }
    }

    license {
        header = rootProject.file("code_quality/${project.license_header}_HEADER.txt")
        include "**/*.java"
        charset = StandardCharsets.UTF_8.name()

        style {
            java = "BLOCK_COMMENT"
        }
        newLine = false // Disables the empty line between the header and package name
        //ignoreFailures = true //Ignore failures and only print a warning on license violations

        //export variables
        ext {
            year = Year.now()
            projectDisplayName = rootProject.archivesBaseName
        }
    }
}

subprojects {
    version = rootProject.version
}

sourceSets {
    testmod {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

task licenseFormatAll
subprojects { p -> licenseFormatAll.dependsOn("${p.path}:licenseFormat") }
subprojects.each { remapJar.dependsOn("${it.path}:remapJar") }

repositories {
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
    }
}

dependencies {
    // used by the test mod
    modImplementation fabricApi.module("fabric-api-base", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-object-builder-api-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-renderer-registries-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-lifecycle-events-v1", rootProject.fabric_api_version)
    modImplementation fabricApi.module("fabric-item-api-v1", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-networking-v0", rootProject.rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-resource-loader-v0", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-mining-levels-v0", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-tag-extensions-v0", rootProject.fabric_api_version)
    modRuntime fabricApi.module("fabric-tool-attribute-api-v1", rootProject.fabric_api_version)

    // Optibad
//    modRuntime 'com.github.modmuss50:OptiFabric:1.1.0-beta2'
//    modRuntime 'org.zeroturnaround:zt-zip:1.14' // required dep for optibad

    testCompileOnly "com.google.code.findbugs:jsr305:3.0.2"

    include fabricApi.module("fabric-api-base", fabric_api_version)
    afterEvaluate {
        subprojects.each {
            api it
            include it
        }
    }
}

task testmodJar(type: Jar, dependsOn: testmodClasses) {
    archiveBaseName = 'CCATest'
    archiveClassifier = 'dev'
    from(sourceSets.testmod.output) {
        include 'fabric.mod.json'
        expand 'version': project.version
    }
    from(sourceSets.testmod.output) {
        exclude 'fabric.mod.json'
    }
}

task remapTestmodJar(type: RemapJarTask, dependsOn: project.testmodJar) {
    archiveBaseName = 'CCATest'
    input = testmodJar.archiveFile
    addNestedDependencies = false
}

build.dependsOn(remapTestmodJar)

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
                builtBy(remapJar)
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}
tasks.publish.dependsOn build //stupid fix for maven/loom not publishing the main artifact
